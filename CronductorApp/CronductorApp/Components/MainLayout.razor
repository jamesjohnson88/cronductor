@using CronductorApp.Components.Composition.Organisms
@using CronductorApp.Components.ViewModels
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@implements IDisposable

<AppHeader />

<AppMain NavigationItems="@NavigationItems">
    @Body
</AppMain>

@code {
    private List<NavigationItem> NavigationItems { get; set; } = [];

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;
        UpdateNavigationItems();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateNavigationItems();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateNavigationItems()
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);

        NavigationItems =
        [
        new NavigationItem
{
Title = "Dashboard",
Link = "#",
Icon ="fas fa-tachometer-alt",
IsActive = currentPath.Equals("") || currentPath.Equals("#")
},
new NavigationItem
{
Title = "Requests",
Link = "/requests",
Icon = "fas fa-list", IsActive = currentPath.StartsWith("requests")
},
new NavigationItem
{
Title = "Events",
Link = "#",
Icon = "fas fa-calendar",
IsActive = currentPath.StartsWith("events")
},
new NavigationItem
{
Title = "Other",
Link = "#",
Icon ="fas fa-ellipsis-h",
IsActive = false // as this is just a placeholder
}
        ];
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}