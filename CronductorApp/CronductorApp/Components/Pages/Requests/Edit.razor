@page "/requests/edit"
@rendermode InteractiveServer
@using CronductorApp.RequestScheduler
@using CronductorApp.RequestScheduler.Models
@using CronductorApp.Components.Composition.Atoms
@inject ScheduleService ScheduleService

<h3>Edit</h3>
<button class="button is-primary is-small" @onclick="TryAddRequest">Add Request</button>
<PrimaryButton
    AdditionalClasses="is-small"
    OnClick="TryAddRequest">
    Add Test Request
</PrimaryButton>
<br />
@if (!string.IsNullOrEmpty(_message))
{
    <div class="">
        @_message
        <button type="button" class="" @onclick="() => { _message = null; }"></button>
    </div>
}

@code {
    private string? _message;
    private Timer? _messageTimer;

    protected override void OnInitialized()
    {
        // check we have access to scheduler
        // show skeleton until we do
        base.OnInitialized();
    }

    private void TryAddRequest()
    {
        var request = new ScheduledRequest
        {
            Name = "Test Request",
            Method = "GET",
            Url = "https://jsonplaceholder.typicode.com/posts/1",
            CronSchedule = "*/20 * * * * *", // Every 20s
        };

        ShowMessage(ScheduleService.AddSchedule(request) ? 
            "Request added successfully." : "Failed to add request.");
    }
    
    private void ShowMessage(string msg)
    {
        _message = msg;
        StateHasChanged();

        _messageTimer?.Dispose();
        _messageTimer = new Timer(_ => {
            InvokeAsync(() => {
                _message = null;
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(3), Timeout.InfiniteTimeSpan);
    }
}