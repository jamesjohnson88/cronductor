<!-- LabeledInput Atom -->
<div class="field">
    <label class="label is-small">@Label</label>
    <div class="control">
        <input class="input is-small" placeholder="@Placeholder" value="@Value" @oninput="OnValueChangedInternal" />
    </div>
    @if (!string.IsNullOrWhiteSpace(HelpText))
    {
        <p class="help @HelpClass">@HelpText</p>
    }
</div>

@code {
    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    [Parameter]
    public string Value { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public string? HelpText { get; set; }

    [Parameter]
    public string HelpClass { get; set; } = string.Empty; // e.g., "help is-danger"

    private async Task OnValueChangedInternal(ChangeEventArgs e)
    {
        Value = e.Value?.ToString() ?? string.Empty;
        await ValueChanged.InvokeAsync(Value);
    }
}

