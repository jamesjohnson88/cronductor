@using CronductorApp.RequestScheduler
@using CronductorApp.RequestScheduler.Models
@inject ScheduleService ScheduleService

<!-- Request Card Molecule -->
<div class="box request-item p-4">
    <div class="mb-3">
        <h4 class="title is-6 mb-1">@RequestDefinitions.Name</h4>
        <p class="subtitle is-7 has-text-grey-light mb-0">@RequestDefinitions.Url</p>
    </div>
    <div class="columns is-vcentered is-mobile">
        <div class="column">
            <div class="tags">
                <StatusTag Text="@RequestDefinitions.CronSchedule" Status="info" />
                <StatusTag Text="@GetStatusText()" Status="@GetStatusClass()" />
            </div>
        </div>
        <div class="column is-narrow is-flex is-align-items-center">
            <div class="buttons mr-2">
                <IconButton IconClass="@GetToggleIcon()" ButtonClass="neutral-button" OnClick="ToggleActive" />
            </div>
            <EditDeleteButtons ItemId="@RequestDefinitions.Id" OnEdit="@OnEdit" OnDelete="@OnDelete" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public RequestDefinitions RequestDefinitions { get; set; } = new();

    [Parameter]
    public EventCallback<string> OnEdit { get; set; }

    [Parameter]
    public EventCallback<string> OnDelete { get; set; }

    private async Task ToggleActive()
    {
        if (RequestDefinitions.IsActive)
        {
            await ScheduleService.PauseDefinitionAsync(RequestDefinitions.Id);
        }
        else
        {
            await ScheduleService.ResumeDefinitionAsync(RequestDefinitions.Id);
        }
    }

    private string GetStatusText() => RequestDefinitions.IsActive ? "Running" : "Paused";
    private string GetStatusClass() => RequestDefinitions.IsActive ? "active" : "inactive";
    private string GetToggleIcon() => RequestDefinitions.IsActive ? "fas fa-pause" : "fas fa-play";
}