@page "/requests/scheduled/new"
@page "/requests/scheduled/edit/{RequestId}"
@rendermode InteractiveServer
@using CronductorApp.Components.Composition.Molecules
@using CronductorApp.Components.Composition.Organisms
@using CronductorApp.Components.Composition.Atoms
@using CronductorApp.Services
@inject RequestService RequestService
@inject NavigationManager Navigation

<PageTitle>@(IsEdit ? "Edit Scheduled Request - Cronductor" : "Add Scheduled Request - Cronductor")</PageTitle>

<div class="requests-page">
    <RequestsSubNav />

    <div class="box p-5 scheduled-edit-panel">
        <div class="mb-4">
            <h3 class="title is-5 mb-1">@(IsEdit ? "Edit Scheduled Request" : "Add Scheduled Request")</h3>
            <p class="subtitle is-7 has-text-grey-light">Configure the request details and schedule.</p>
        </div>

        <ScheduledRequestForm Model="Model" ShowValidation="ShowValidation" OnSave="Save" OnCancel="Cancel" />
    </div>
</div>

@code {
    [Parameter]
    public string? RequestId { get; set; }

    private RequestModel Model { get; set; } = new();
    private bool IsEdit => !string.IsNullOrWhiteSpace(RequestId);
    private bool ShowValidation { get; set; }

    protected override void OnInitialized()
    {
        if (IsEdit)
        {
            var existing = RequestService.ScheduledRequests.FirstOrDefault(r => r.Id == RequestId);
            if (existing != null)
            {
                Model = new RequestModel
                {
                    Id = existing.Id,
                    Name = existing.Name,
                    Url = existing.Url,
                    Schedule = existing.Schedule,
                    IsActive = existing.IsActive,
                    CreatedAt = existing.CreatedAt,
                    LastExecuted = existing.LastExecuted,
                    Method = string.IsNullOrWhiteSpace(existing.Method) ? "GET" : existing.Method,
                    ContentType = string.IsNullOrWhiteSpace(existing.ContentType) ? "application/json" : existing.ContentType,
                    Headers = existing.Headers?.Select(h => new HeaderItem { Key = h.Key, Value = h.Value }).ToList() ?? new
                List<HeaderItem>(),
                    BodyJson = existing.BodyJson
                };
            }
            else
            {
                // If not found, redirect back
                Navigation.NavigateTo("/requests/scheduled");
            }
        }
        else
        {
            Model = new RequestModel
            {
                IsActive = true,
                CreatedAt = DateTime.Now
            };
        }
    }

    private async Task Save()
    {
        if (!Validate())
        {
            ShowValidation = true;
            return;
        }

        if (IsEdit)
        {
            await RequestService.EditRequest(Model.Id, Model);
        }
        else
        {
            Model.Id = Guid.NewGuid().ToString("N");
            Model.CreatedAt = DateTime.Now;
            await RequestService.AddRequest(Model);
        }

        Navigation.NavigateTo("/requests/scheduled");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/requests/scheduled");
    }

    private bool Validate()
    {
        return !string.IsNullOrWhiteSpace(Model.Name)
        && !string.IsNullOrWhiteSpace(Model.Url)
        && !string.IsNullOrWhiteSpace(Model.Schedule);
    }

}
