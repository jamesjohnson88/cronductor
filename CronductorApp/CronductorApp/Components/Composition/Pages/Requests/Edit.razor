@page "/requests/scheduled/new"
@page "/requests/scheduled/edit/{RequestId}"
@rendermode InteractiveServer
@using CronductorApp.RequestScheduler
@using CronductorApp.RequestScheduler.Models
@inject ScheduleService ScheduleService
@inject NavigationManager Navigation

<PageTitle>@(IsEdit ? "Edit Scheduled Request - Cronductor" : "Add Scheduled Request - Cronductor")</PageTitle>

<div class="requests-page">
    <RequestsSubNav />

    <div class="box p-5 scheduled-edit-panel">
        <div class="mb-4">
            <h3 class="title is-5 mb-1">@(IsEdit ? "Edit Scheduled Request" : "Add Scheduled Request")</h3>
            <p class="subtitle is-7 has-text-grey-light">Configure the request details and schedule.</p>
        </div>

        <ScheduledRequestForm Model="Model" ShowValidation="ShowValidation" OnSave="Save" OnCancel="Cancel" />
    </div>
</div>

@code {
    [Parameter]
    public string? RequestId { get; set; }

    private ScheduledRequest Model { get; set; } = new();
    private bool IsEdit => !string.IsNullOrWhiteSpace(RequestId);
    private bool ShowValidation { get; set; }

    protected override void OnInitialized()
    {
        if (IsEdit)
        {
            // todo - should maybe call storage directly here? (once impl)
            var existing = ScheduleService.RequestDefinitions.FirstOrDefault(r => r.Id == RequestId);
            if (existing != null)
            {
                Model = new ScheduledRequest()
                {
                    Id = existing.Id,
                    Name = existing.Name,
                    Url = existing.Url,
                    CronSchedule = existing.CronSchedule,
                    IsActive = existing.IsActive,
                    CreatedAt = existing.CreatedAt,
                    LastExecuted = existing.LastExecuted,
                    Method = string.IsNullOrWhiteSpace(existing.Method) ? "GET" : existing.Method,
                    ContentType = string.IsNullOrWhiteSpace(existing.ContentType) ? "application/json" : existing.ContentType,
                    Headers = existing.Headers,
                    Body = existing.Body
                };
            }
            else
            {
                // If not found, redirect back
                Navigation.NavigateTo("/requests/scheduled");
            }
        }
        else
        {
            Model = new ScheduledRequest();
        }
    }

    private async Task Save()
    {
        if (!Validate())
        {
            ShowValidation = true;
            return;
        }

        await ScheduleService.AddOrUpdateDefinitionAsync(Model);

        Navigation.NavigateTo("/requests/scheduled");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/requests/scheduled");
    }

    private bool Validate()
    {
        // use fluent but inject and validate here?
        return !string.IsNullOrWhiteSpace(Model.Name)
        && !string.IsNullOrWhiteSpace(Model.Url)
        && !string.IsNullOrWhiteSpace(Model.CronSchedule);
    }

}
