@page "/requests/edit"
@rendermode InteractiveServer
@using CronductorApp.RequestScheduler
@using CronductorApp.RequestScheduler.Models
@using CronductorApp.Components.Composition.Atoms
@inject ScheduleService ScheduleService
@implements IDisposable

<h3>Edit</h3>
<PrimaryButton AdditionalClasses="is-small" OnClick="TryAddRequest">
    Add Test Request
</PrimaryButton>
<br />

@if (!string.IsNullOrEmpty(_message))
{
            <div class="notification @(_isError ? "is-danger" : "is-success")">
                @_message
                <button type="button" class="delete" @onclick="() => { _message = null; _isError = false; }"></button>
            </div>
}

@code {
    private string? _message;
    private bool _isError;
    private Timer? _messageTimer;

    private void TryAddRequest()
    {
        _message = null;
        _isError = false;

        var request = new ScheduledRequest
        {
            Name = "Test Request",
            Method = "GET",
            Url = "https://jsonplaceholder.typicode.com/posts/1",
            CronSchedule = "*/20 * * * * *"
        };

        var success = ScheduleService.AddSchedule(request);
        ShowMessage(success ? "Request added successfully." : "Failed to add request.", !success);
    }
    
    private void ShowMessage(string msg, bool isError = false)
    {
        _message = msg;
        _isError = isError;
        StateHasChanged();

        _messageTimer?.Dispose();
        _messageTimer = new Timer(_ =>
        {
            InvokeAsync(() =>
            {
                _message = null;
                _isError = false;
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(3), Timeout.InfiniteTimeSpan);
    }

    public void Dispose()
    {
        _messageTimer?.Dispose();
    }
}
  