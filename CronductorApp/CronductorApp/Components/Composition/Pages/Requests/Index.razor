@page "/requests"
@rendermode InteractiveServer
@using CronductorApp.Components.Composition.Molecules
@using CronductorApp.Components.Composition.Organisms
@using CronductorApp.Components.Composition.Models

<PageTitle>Requests - Cronductor</PageTitle>

<div class="requests-page">
    <h1 class="title is-2 has-text-weight-bold mb-6 page-title">Requests</h1>

    <RequestsSubNav ActiveSection="@activeSection" OnSectionChanged="@OnSectionChanged" />

    <div class="requests-content">
        @if (activeSection == "scheduled")
        {
            <ScheduledRequestsSection ScheduledRequests="@scheduledRequests" OnAddRequest="@AddRequest"
                OnEditRequest="@EditRequest" OnDeleteRequest="@DeleteRequest" />
        }
        else if (activeSection == "history")
        {
            <RequestHistorySection RequestHistory="@requestHistory" />
        }
        else if (activeSection == "live")
        {
            <LiveRequestsSection LiveLogs="@liveLogs" />
        }
    </div>
</div>

@code {
    private string activeSection = "scheduled";

    // Sample data - replace with actual data from your backend
    private List<RequestModel> scheduledRequests = new()
{
new()
{
Id = "1",
Name = "Health Check API",
Url = "https://api.example.com/health",
Schedule = "Every 5 minutes",
IsActive = true,
CreatedAt = DateTime.Now.AddDays(-7),
LastExecuted = DateTime.Now.AddMinutes(-2)
},
new()
{
Id = "2",
Name = "Data Sync Job",
Url = "https://api.example.com/sync",
Schedule = "Daily at 2:00 AM",
IsActive = false,
CreatedAt = DateTime.Now.AddDays(-14),
LastExecuted = DateTime.Now.AddDays(-1)
}
};

    private List<HistoryModel> requestHistory = new()
{
new()
{
Id = "h1",
RequestName = "Health Check API",
Url = "https://api.example.com/health",
Method = "GET",
Status = "Success",
StatusCode = 200,
Duration = 150,
ExecutedAt = DateTime.Now.AddMinutes(-5),
Headers = "{\n \"User-Agent\": \"Cronductor/1.0\",\n \"Accept\": \"application/json\"\n}",
ResponseHeaders = "{\n \"Content-Type\": \"application/json\",\n \"Cache-Control\": \"no-cache\"\n}",
ResponseBody = "{\n \"status\": \"healthy\",\n \"timestamp\": \"2024-01-15T10:30:00Z\"\n}"
},
new()
{
Id = "h2",
RequestName = "Data Sync Job",
Url = "https://api.example.com/sync",
Method = "POST",
Status = "Error",
StatusCode = 500,
Duration = 5000,
ExecutedAt = DateTime.Now.AddHours(-2),
Headers = "{\n \"User-Agent\": \"Cronductor/1.0\",\n \"Content-Type\": \"application/json\"\n}",
ResponseHeaders = "{\n \"Content-Type\": \"application/json\"\n}",
ResponseBody = "{\n \"error\": \"Internal server error\",\n \"message\": \"Database connection failed\"\n}"
}
};

    private List<LiveLogModel> liveLogs = new()
{
new()
{
Id = "l1",
Level = "info",
Message = "Starting request execution",
Details = "Request ID: req_12345\nURL: https://api.example.com/health",
Timestamp = DateTime.Now.AddSeconds(-30)
},
new()
{
Id = "l2",
Level = "success",
Message = "Request completed successfully",
Details = "Status: 200\nDuration: 150ms",
Timestamp = DateTime.Now.AddSeconds(-25)
},
new()
{
Id = "l3",
Level = "warning",
Message = "Request took longer than expected",
Details = "Expected: <1000ms\nActual: 1500ms",
Timestamp = DateTime.Now.AddSeconds(-20)
}
};

    private async Task OnSectionChanged(string section)
    {
        activeSection = section;
        await Task.CompletedTask; // Placeholder for any async operations
    }

    private async Task AddRequest()
    {
        // TODO: Implement add request logic
        await Task.CompletedTask;
    }

    private async Task EditRequest(string requestId)
    {
        // TODO: Implement edit request logic
        await Task.CompletedTask;
    }

    private async Task DeleteRequest(string requestId)
    {
        // TODO: Implement delete request logic
        await Task.CompletedTask;
    }
}