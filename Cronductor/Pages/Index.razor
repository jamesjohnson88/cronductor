@page "/"
@using Cronductor.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject RequestSchedulerService Scheduler
@inject NavigationManager Navigation

@code {
    private List<string> logEntries = new();
    private HubConnection? hubConnection;
    private string connectionStatus = "Connecting...";
    private string? connectionError;

    protected override async Task OnInitializedAsync()
    {
        logEntries = Scheduler.GetLog().OrderByDescending(l => l.Split(' ')[0]).Take(50).ToList();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/logHub"))
            .WithAutomaticReconnect()
            .Build();
        hubConnection.On<string>("ReceiveLog", (log) =>
        {
            logEntries.Insert(0, log);
            if (logEntries.Count > 50) logEntries.RemoveAt(logEntries.Count - 1);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.Closed += async (error) =>
        {
            connectionStatus = "Disconnected";
            connectionError = error?.Message;
            await Task.Delay(2000);
            await hubConnection.StartAsync();
        };
        hubConnection.Reconnecting += error =>
        {
            connectionStatus = "Reconnecting...";
            connectionError = error?.Message;
            StateHasChanged();
            return Task.CompletedTask;
        };
        hubConnection.Reconnected += connectionId =>
        {
            connectionStatus = "Connected";
            connectionError = null;
            StateHasChanged();
            return Task.CompletedTask;
        };
        try {
            await hubConnection.StartAsync();
            connectionStatus = "Connected";
        } catch (Exception ex) {
            connectionStatus = "Error";
            connectionError = ex.Message;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
            await hubConnection.DisposeAsync();
    }

    private (string Timestamp, string Generator, string Result, string Level) ParseLog(string entry)
    {
        var parts = entry.Split(' ', 4);
        var level = entry.Contains("ERROR") ? "error" : (entry.Contains("200") ? "success" : "info");
        return (
            parts.Length > 1 ? $"{parts[0]} {parts[1]}" : "",
            parts.Length > 2 ? parts[2].Trim('[', ']') : "",
            parts.Length > 3 ? parts[3] : "",
            level
        );
    }
}

<h1 class="log-title">Cronductor Request Log</h1>
<div class="status-bar">
    <span class="status-indicator @(connectionStatus.ToLower())"></span>
    <span>@connectionStatus</span>
    @if (connectionError != null)
    {
        <span class="error-message">@connectionError</span>
    }
</div>
<p class="log-desc">Live log of scheduled HTTP requests. New entries appear instantly.</p>
<div class="log-card">
    <table class="log-table">
        <thead>
            <tr>
                <th>Timestamp (UTC)</th>
                <th>Generator</th>
                <th>Result</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in logEntries)
            {
                var parsed = ParseLog(entry);
                <tr class="@(parsed.Level)">
                    <td>@parsed.Timestamp</td>
                    <td>@parsed.Generator</td>
                    <td>
                        @if (parsed.Level == "success") {
                            <span class="icon success"><svg width="18" height="18" viewBox="0 0 18 18"><circle cx="9" cy="9" r="9" fill="#27ae60"/><path d="M5 9l3 3 5-5" stroke="#fff" stroke-width="2" fill="none"/></svg></span>
                        } else if (parsed.Level == "error") {
                            <span class="icon error"><svg width="18" height="18" viewBox="0 0 18 18"><circle cx="9" cy="9" r="9" fill="#c0392b"/><path d="M6 6l6 6M12 6l-6 6" stroke="#fff" stroke-width="2" fill="none"/></svg></span>
                        } else {
                            <span class="icon info"><svg width="18" height="18" viewBox="0 0 18 18"><circle cx="9" cy="9" r="9" fill="#2980b9"/><text x="9" y="13" text-anchor="middle" font-size="10" fill="#fff">i</text></svg></span>
                        }
                        <span class="log-result">@parsed.Result</span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<style>
.log-title {
    color: #2c3e50;
    font-size: 2.2em;
    font-weight: 700;
    text-align: center;
    margin-top: 32px;
}
.status-bar {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    margin-bottom: 10px;
    font-size: 1.1em;
}
.status-indicator {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    margin-right: 4px;
    background: #bbb;
}
.status-indicator.connected { background: #27ae60; }
.status-indicator.connecting { background: #f1c40f; }
.status-indicator.reconnecting { background: #f39c12; }
.status-indicator.disconnected, .status-indicator.error { background: #c0392b; }
.error-message { color: #c0392b; font-weight: 600; }
.log-desc {
    color: #555;
    text-align: center;
    margin-bottom: 18px;
}
.log-card {
    max-width: 900px;
    margin: 0 auto 40px auto;
    background: #fff;
    border-radius: 16px;
    box-shadow: 0 4px 24px rgba(44,62,80,0.08);
    padding: 32px 24px;
    animation: fadeIn 0.7s;
}
keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: none; }
}
.log-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    font-size: 1.08em;
}
.log-table th {
    background: #34495e;
    color: #fff;
    font-weight: 600;
    padding: 12px 8px;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
}
.log-table td {
    padding: 10px 8px;
    vertical-align: top;
    border-bottom: 1px solid #f0f0f0;
}
tr.success td { background: #eafaf1; color: #27ae60; }
tr.error td { background: #fdecea; color: #c0392b; font-weight: bold; }
tr.info td { background: #eef6fb; color: #2980b9; }
.icon { vertical-align: middle; margin-right: 6px; }
.log-result { vertical-align: middle; }
</style>
